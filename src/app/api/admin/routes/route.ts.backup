import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { RouteStatus } from '@/types/route';

const prisma = new PrismaClient();

// GET /api/admin/routes - List all routes
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status') as RouteStatus | null;
    const collector = searchParams.get('collector');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');

    const where: any = {};
    if (status) where.status = status;
    if (collector) where.assigned_collector_id = collector;

    const routes = await prisma.collectionRoute.findMany({
      where,
      include: {
        urgent_requests: {
          where: {
            status: {
              in: ['PENDING', 'ASSIGNED']
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      skip: (page - 1) * limit,
      take: limit,
    });

    const total = await prisma.collectionRoute.count({ where });

    return NextResponse.json({
      routes,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit),
      },
    });
  } catch (error) {
    console.error('Error fetching routes:', error);
    return NextResponse.json(
      { error: 'Failed to fetch routes' },
      { status: 500 }
    );
  }
}

// POST /api/admin/routes - Create new route
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const {
      name,
      description,
      assigned_collector_id,
      schedule_time,
      estimated_duration,
      status,
      pickup_points,
    } = body;

    // Generate route code
    const routeCode = `R${Date.now().toString().slice(-6)}`;

    // Create route with Google Maps data
    const route = await prisma.collectionRoute.create({
      data: {
        route_name: name,
        route_code: routeCode,
        description,
        status: status || 'DRAFT',
        route_path: pickup_points, // Store as JSON
        route_polyline: '', // Will be updated when Google Maps integration is called
        total_distance_km: 0,
        estimated_time_min: estimated_duration || 60,
        active_days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],
        time_windows: [
          {
            start: '08:00',
            end: '12:00',
          },
        ],
      },
    });

    return NextResponse.json(route, { status: 201 });
  } catch (error) {
    console.error('Error creating route:', error);
    return NextResponse.json(
      { error: 'Failed to create route' },
      { status: 500 }
    );
  }
}
