"use client";
import { useState, useEffect } from "react";

export interface PermissionStatus {
  camera: PermissionState | null;
  geolocation: PermissionState | null;
}

export function usePermissions() {
  const [permissions, setPermissions] = useState<PermissionStatus>({
    camera: null,
    geolocation: null,
  });
  const [loading, setLoading] = useState(false);

  // Ki·ªÉm tra quy·ªÅn hi·ªán t·∫°i
  const checkPermissions = async () => {
    setLoading(true);
    try {
      if ("permissions" in navigator) {
        const cameraPermission = await navigator.permissions.query({
          name: "camera" as PermissionName,
        });
        const geoPermission = await navigator.permissions.query({
          name: "geolocation" as PermissionName,
        });

        setPermissions({
          camera: cameraPermission.state,
          geolocation: geoPermission.state,
        });
      }
    } catch (error) {
      console.log("Permissions API not fully supported");
    }
    setLoading(false);
  };

  // Ki·ªÉm tra xem c√≥ ph·∫£i l√† mobile kh√¥ng
  const isMobile = () => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  };

  // Y√™u c·∫ßu quy·ªÅn camera - LU√îN th·ª≠ request, kh√¥ng check API support tr∆∞·ªõc
  const requestCameraPermission = async (): Promise<boolean> => {
    try {
      // Constraints ƒë∆°n gi·∫£n cho Android
      const constraints: MediaStreamConstraints = {
        video: {
          facingMode: "environment", // Camera sau cho mobile
        },
        audio: false,
      };

      let stream: MediaStream | null = null;

      // C·ªë g·∫Øng v·ªõi t·∫•t c·∫£ c√°c c√°ch c√≥ th·ªÉ
      try {
        // C√°ch 1: Modern API
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          console.log("üì± Trying modern getUserMedia...");
          stream = await navigator.mediaDevices.getUserMedia(constraints);
        }
        // C√°ch 2: Legacy API v·ªõi type casting
        else if ((navigator as any).getUserMedia) {
          console.log("üì± Trying legacy getUserMedia...");
          stream = await new Promise<MediaStream>((resolve, reject) => {
            (navigator as any).getUserMedia(constraints, resolve, reject);
          });
        }
        // C√°ch 3: Webkit prefix
        else if ((navigator as any).webkitGetUserMedia) {
          console.log("üì± Trying webkit getUserMedia...");
          stream = await new Promise<MediaStream>((resolve, reject) => {
            (navigator as any).webkitGetUserMedia(constraints, resolve, reject);
          });
        } else {
          throw new Error("No getUserMedia API available");
        }

        if (stream && stream.getTracks().length > 0) {
          // D·ª´ng stream ngay
          stream.getTracks().forEach((track) => {
            console.log("üõë Stopping track:", track.label);
            track.stop();
          });

          // C·∫≠p nh·∫≠t state
          setPermissions((prev) => ({ ...prev, camera: "granted" }));
          return true;
        } else {
          throw new Error("No video tracks in stream");
        }
      } catch (streamError) {
        console.error("‚ùå Stream error:", streamError);
        throw streamError;
      }
    } catch (error: any) {
      console.error("‚ùå Camera permission FAILED:", error);

      // Chi ti·∫øt l·ªói cho debug
      console.log("üì± Error details:", {
        name: error.name,
        message: error.message,
        constraint: error.constraint,
      });

      if (error.name === "NotAllowedError") {
        alert(
          "‚ö†Ô∏è B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn Camera.\n\nƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ch·ª•p ·∫£nh:\n1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng üîí ho·∫∑c ‚öôÔ∏è tr√™n thanh ƒë·ªãa ch·ªâ\n2. Ch·ªçn 'Camera' ‚Üí 'Allow'\n3. T·∫£i l·∫°i trang"
        );
        setPermissions((prev) => ({ ...prev, camera: "denied" }));
      } else if (error.name === "NotFoundError") {
        alert("Kh√¥ng t√¨m th·∫•y camera tr√™n thi·∫øt b·ªã n√†y");
      } else if (error.name === "OverconstrainedError") {
        // Th·ª≠ v·ªõi constraints c∆° b·∫£n nh·∫•t
        return await requestBasicCameraPermission();
      } else {
        alert(
          "L·ªói camera kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng:\n1. ƒê√≥ng c√°c ·ª©ng d·ª•ng camera kh√°c\n2. C·∫≠p nh·∫≠t tr√¨nh duy·ªát\n3. Th·ª≠ l·∫°i"
        );
      }

      return false;
    }
  };

  // Fallback v·ªõi constraints c∆° b·∫£n nh·∫•t
  const requestBasicCameraPermission = async (): Promise<boolean> => {
    try {
      console.log("üîß Trying BASIC camera permission...");

      let stream: MediaStream | null = null;

      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        stream = await navigator.mediaDevices.getUserMedia({ video: true });
      } else if ((navigator as any).getUserMedia) {
        stream = await new Promise<MediaStream>((resolve, reject) => {
          (navigator as any).getUserMedia({ video: true }, resolve, reject);
        });
      }

      if (stream) {
        console.log("‚úÖ BASIC camera permission granted!");
        stream.getTracks().forEach((track) => track.stop());
        setPermissions((prev) => ({ ...prev, camera: "granted" }));
        return true;
      }

      return false;
    } catch (error) {
      console.error("‚ùå BASIC camera permission also failed:", error);
      return false;
    }
  };

  // Y√™u c·∫ßu quy·ªÅn GPS
  const requestGeolocationPermission = async (): Promise<boolean> => {
    return new Promise((resolve) => {
      if (!navigator.geolocation) {
        console.log("üåç Geolocation not supported");
        alert("Thi·∫øt b·ªã n√†y kh√¥ng h·ªó tr·ª£ GPS");
        resolve(false);
        return;
      }

      console.log("üåç Requesting GPS permission on Android...");

      const options = {
        enableHighAccuracy: true, // Force GPS ƒë·ªÉ trigger permission
        timeout: 30000, // 30 gi√¢y
        maximumAge: 0, // Fresh request
      };

      console.log("üîê Triggering Android GPS permission...");

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("‚úÖ GPS permission SUCCESS:", {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            accuracy: position.coords.accuracy,
          });

          setPermissions((prev) => ({ ...prev, geolocation: "granted" }));
          resolve(true);
        },
        (error) => {
          console.error("‚ùå GPS permission FAILED:", error);

          switch (error.code) {
            case error.PERMISSION_DENIED:
              console.log("üö´ User DENIED GPS permission");
              alert(
                "‚ö†Ô∏è B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn V·ªã tr√≠.\n\nƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ƒë·ªãnh v·ªã:\n1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng üîí ho·∫∑c ‚öôÔ∏è tr√™n thanh ƒë·ªãa ch·ªâ\n2. Ch·ªçn 'Location' ‚Üí 'Allow'\n3. T·∫£i l·∫°i trang"
              );
              setPermissions((prev) => ({ ...prev, geolocation: "denied" }));
              break;
            case error.POSITION_UNAVAILABLE:
              console.log("üìç GPS unavailable");
              alert("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠. Ki·ªÉm tra GPS v√† m·∫°ng");
              break;
            case error.TIMEOUT:
              console.log("‚è∞ GPS timeout");
              alert("Timeout l·∫•y v·ªã tr√≠ GPS. Th·ª≠ l·∫°i");
              break;
          }

          resolve(false);
        },
        options
      );
    });
  };

  // Y√™u c·∫ßu t·∫•t c·∫£ quy·ªÅn
  const requestAllPermissions = async (): Promise<{
    camera: boolean;
    geolocation: boolean;
  }> => {
    const [cameraGranted, geoGranted] = await Promise.all([
      requestCameraPermission(),
      requestGeolocationPermission(),
    ]);

    return {
      camera: cameraGranted,
      geolocation: geoGranted,
    };
  };

  // Initialize
  useEffect(() => {
    checkPermissions();
  }, []);

  return {
    permissions,
    loading,
    requestCameraPermission,
    requestGeolocationPermission,
    requestAllPermissions,
    requestBasicCameraPermission,
    isMobile: isMobile(),
  };
}
