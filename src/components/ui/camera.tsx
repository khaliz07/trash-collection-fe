"use client";
import { useState, useRef, useCallback, useEffect } from "react";
import { Button } from "./button";
import { Card } from "./card";
import { usePermissions } from "@/hooks/use-permissions";
import { createTimestampedImageFile } from "@/lib/image-utils";

interface CameraProps {
  onCapture: (file: File) => void;
  onClose: () => void;
}

export function Camera({ onCapture, onClose }: CameraProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const [isActive, setIsActive] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [videoReady, setVideoReady] = useState(false);
  const [permissionRequested, setPermissionRequested] = useState(false);
  const [permissionDialogShown, setPermissionDialogShown] = useState(false);
  const { permissions, requestCameraPermission, isMobile } = usePermissions();

  const startCamera = useCallback(async () => {
    try {
      console.log("üé• Starting camera...");
      setError(null);
      setVideoReady(false);

      // Safety check: ƒê·∫£m b·∫£o video element c√≥ s·∫µn
      if (!videoRef.current) {
        console.log("‚è≥ Video element not ready yet, waiting...");
        setError("ƒêang chu·∫©n b·ªã camera interface...");
        return false;
      }

      // Ki·ªÉm tra permission tr∆∞·ªõc
      if (permissions.camera !== "granted") {
        console.log("üì± Requesting camera permission...");
        const granted = await requestCameraPermission();
        setPermissionRequested(true);

        if (!granted) {
          setError(
            "‚ö†Ô∏è Vui l√≤ng c·∫•p quy·ªÅn camera ƒë·ªÉ ch·ª•p ·∫£nh ƒëi·ªÉm danh.\n\n1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng üîí tr√™n thanh ƒë·ªãa ch·ªâ\n2. Ch·ªçn 'Camera' ‚Üí 'Allow'\n3. T·∫£i l·∫°i trang"
          );
          return false;
        }
      }

      // Mobile-optimized constraints
      const constraints: MediaStreamConstraints = {
        video: {
          width: { ideal: isMobile ? 720 : 1280 },
          height: { ideal: isMobile ? 1280 : 720 },
          facingMode: isMobile ? "environment" : "user", // Camera sau cho mobile
          // ƒê∆°n gi·∫£n h√≥a constraints cho Android
        },
        audio: false,
      };

      console.log("üé• Camera constraints:", constraints);

      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error("MediaDevices API not supported");
      }

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      console.log(
        "‚úÖ Camera stream obtained:",
        stream.getTracks().length,
        "tracks"
      );

      // Double check video element
      if (!videoRef.current) {
        console.error(
          "‚ùå videoRef.current is still null after stream obtained"
        );
        stream.getTracks().forEach((track) => track.stop()); // Clean up
        setError("Video element kh√¥ng s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
        return false;
      }

      console.log("üìπ Setting video srcObject...");
      videoRef.current.srcObject = stream;
      streamRef.current = stream;

      // Force video setup
      try {
        console.log("üé¨ Attempting to play video...");
        await videoRef.current.play();
        console.log("‚ñ∂Ô∏è Video play successful");
        setIsActive(true);
      } catch (playError) {
        console.error("‚ùå Video play failed:", playError);

        // Fallback: Set active anyway v√† let user manual restart
        setIsActive(true);
      }

      console.log("üìπ Video element configured");
      return true;
    } catch (err: any) {
      console.error("‚ùå Camera error:", err);
      let errorMessage = "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera.";

      if (err.name === "NotAllowedError") {
        errorMessage =
          "‚ö†Ô∏è Quy·ªÅn camera b·ªã t·ª´ ch·ªëi.\n\nüì± ƒê·ªÉ s·ª≠ d·ª•ng camera:\n1. Nh·∫•n v√†o üîí tr√™n thanh ƒë·ªãa ch·ªâ\n2. Cho ph√©p 'Camera'\n3. T·∫£i l·∫°i trang";
      } else if (err.name === "NotFoundError") {
        errorMessage = "‚ùå Kh√¥ng t√¨m th·∫•y camera tr√™n thi·∫øt b·ªã n√†y.";
      } else if (err.name === "NotReadableError") {
        errorMessage =
          "üîí Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.\n\nVui l√≤ng ƒë√≥ng c√°c ·ª©ng d·ª•ng camera kh√°c v√† th·ª≠ l·∫°i.";
      } else if (err.name === "OverconstrainedError") {
        errorMessage =
          "‚ö†Ô∏è C√†i ƒë·∫∑t camera kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.\n\nTh·ª≠ v·ªõi constraints c∆° b·∫£n...";
        // Fallback v·ªõi constraints ƒë∆°n gi·∫£n
        try {
          const basicStream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          if (videoRef.current) {
            videoRef.current.srcObject = basicStream;
            streamRef.current = basicStream;
            setIsActive(true);
            return;
          }
        } catch (basicErr) {
          console.error("‚ùå Basic camera also failed:", basicErr);
        }
      }

      setError(errorMessage);
    }
  }, [requestCameraPermission, permissions.camera, isMobile]);

  // // T·ª± ƒë·ªông start camera n·∫øu ƒë√£ c√≥ permission
  // useEffect(() => {
  //   // Ch·ªâ auto-start n·∫øu ƒë√£ c√≥ permission V√Ä video element ƒë√£ s·∫µn s√†ng
  //   if (permissions.camera === "granted" && !isActive && videoRef.current) {
  //     console.log(
  //       "üì± Camera permission already granted and video element ready, auto-starting..."
  //     );
  //     startCamera();
  //   }
  // }, [permissions.camera, isActive, startCamera, videoRef.current]);

  // Retry mechanism n·∫øu video element ch∆∞a s·∫µn s√†ng
  useEffect(() => {
    if (permissions.camera === "granted" && !isActive && !streamRef.current) {
      const retryTimer = setTimeout(() => {
        if (videoRef.current) {
          console.log("üîÑ Retry: Video element now ready, starting camera...");
          startCamera();
        } else {
          console.log("üîÑ Video element still not ready, will retry again...");
        }
      }, 500); // TƒÉng th·ªùi gian ch·ªù t·ª´ 100ms ‚Üí 500ms

      return () => clearTimeout(retryTimer);
    }
  }, [permissions.camera, isActive, startCamera, videoRef.current?.videoWidth]);

  // Force refresh khi modal m·ªü
  // useEffect(() => {
  //   // Khi component mount, ƒë·ª£i m·ªôt ch√∫t r·ªìi check video element
  //   const mountTimer = setTimeout(() => {
  //     console.log("üì∫ Component mounted, video element:", !!videoRef.current);
  //     if (permissions.camera === "granted" && !isActive && videoRef.current) {
  //       console.log("üöÄ Late start: Video element ready after mount");
  //       startCamera();
  //     }
  //   }, 200);

  //   return () => clearTimeout(mountTimer);
  // }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount

  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track) => track.stop());
      streamRef.current = null;
    }
    setIsActive(false);
    setVideoReady(false);
  }, []);

  const capturePhoto = useCallback(() => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext("2d");

    if (!context) return;

    // Set canvas dimensions to match video
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    // Draw the video frame to canvas
    context.drawImage(video, 0, 0);

    // Convert canvas to blob
    canvas.toBlob(
      (blob) => {
        if (blob) {
          const file = createTimestampedImageFile(
            blob,
            `checkin-${Date.now()}.jpg`
          );
          onCapture(file);
          stopCamera();
          onClose();
        }
      },
      "image/jpeg",
      0.9
    );
  }, [onCapture, onClose, stopCamera]);

  const handleClose = useCallback(() => {
    stopCamera();
    onClose();
  }, [stopCamera, onClose]);

  // Ki·ªÉm tra quy·ªÅn khi component mount
  useEffect(() => {
    if (isMobile) {
      // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu quy·ªÅn cho mobile
      setError(
        "·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p camera ƒë·ªÉ ch·ª•p ·∫£nh ƒëi·ªÉm danh. Nh·∫•n 'B·∫≠t camera' ƒë·ªÉ c·∫•p quy·ªÅn."
      );
    }
  }, [isMobile]);
  console.log(
    streamRef.current,
    !videoRef.current?.videoWidth,
    videoRef.current?.videoWidth === 0,
    streamRef.current &&
      (!videoRef.current?.videoWidth || videoRef.current?.videoWidth === 0)
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
      <Card className={`p-6 w-full mx-4 ${isMobile ? "max-w-sm" : "max-w-md"}`}>
        <div className="text-center mb-4">
          <h3 className="text-lg font-bold">Ch·ª•p ·∫£nh ƒëi·ªÉm danh</h3>
          {isMobile && (
            <p className="text-sm text-gray-600 mt-1">
              S·ª≠ d·ª•ng camera sau ƒë·ªÉ ch·ª•p ·∫£nh r√µ n√©t
            </p>
          )}
        </div>

        {error && (
          <div className="text-red-600 text-sm mb-4 text-center bg-red-50 p-3 rounded-lg">
            {error}
          </div>
        )}

        {/* Video element - LU√îN render ƒë·ªÉ ref c√≥ th·ªÉ attach */}
        <div className={`space-y-4 ${!isActive ? "hidden" : ""}`}>
          <div className="relative">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              muted
              className="w-full rounded-lg"
              style={{
                maxHeight: isMobile ? "400px" : "300px",
                objectFit: "cover",
                transform: isMobile ? "none" : "scaleX(-1)", // Mirror cho desktop
                backgroundColor: "#000", // Background ƒëen ƒë·ªÉ th·∫•y r√µ
                minHeight: "200px", // ƒê·∫£m b·∫£o c√≥ chi·ªÅu cao t·ªëi thi·ªÉu
              }}
              onLoadedMetadata={() => {
                console.log("üé• Video loadedmetadata event fired");
                console.log(
                  "üìê Video dimensions:",
                  videoRef.current?.videoWidth,
                  "x",
                  videoRef.current?.videoHeight
                );
                setVideoReady(true);
              }}
              onPlaying={() => {
                console.log("‚ñ∂Ô∏è Video playing event fired");
                setVideoReady(true);
              }}
              onError={(e) => {
                console.error("‚ùå Video error:", e);
                setVideoReady(false);
              }}
              onCanPlay={() => {
                console.log("‚úÖ Video can play");
                setVideoReady(true);
              }}
            />

            {/* Manual start button n·∫øu video kh√¥ng hi·ªÉn th·ªã */}
            {streamRef.current && !videoReady && (
              <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50">
                <div className="text-center text-white">
                  <div className="mb-2">
                    üìπ Camera connected but video not showing
                  </div>
                  <Button
                    onClick={async () => {
                      if (videoRef.current && streamRef.current) {
                        console.log("üîÑ Manual video restart");
                        videoRef.current.srcObject = streamRef.current;
                        try {
                          await videoRef.current.play();
                          console.log("‚úÖ Manual play successful");
                          setVideoReady(true);
                        } catch (err) {
                          console.error("‚ùå Manual play failed:", err);
                        }
                      }
                    }}
                    size="sm"
                  >
                    üîÑ Restart Video
                  </Button>
                </div>
              </div>
            )}

            {/* Overlay h∆∞·ªõng d·∫´n */}
            <div className="absolute inset-0 pointer-events-none">
              <div className="absolute top-2 left-2 right-2 text-white text-sm bg-black bg-opacity-50 p-2 rounded">
                üìç ƒê·∫£m b·∫£o v·ªã tr√≠ l√†m vi·ªác hi·ªán r√µ trong khung h√¨nh
              </div>
            </div>
          </div>

          <div className="flex space-x-2">
            <Button
              onClick={capturePhoto}
              className="flex-1"
              size={isMobile ? "lg" : "default"}
            >
              üì∏ Ch·ª•p ·∫£nh
            </Button>
            <Button
              variant="outline"
              onClick={handleClose}
              className="flex-1"
              size={isMobile ? "lg" : "default"}
            >
              H·ªßy
            </Button>
          </div>

          {isMobile && (
            <p className="text-xs text-center text-gray-500">
              Gi·ªØ ƒëi·ªán tho·∫°i th·∫≥ng v√† ƒë·ª£i camera l·∫•y n√©t
            </p>
          )}
        </div>

        {/* Canvas - LU√îN render ƒë·ªÉ ref c√≥ th·ªÉ attach */}
        <canvas ref={canvasRef} className="hidden" />

        {/* UI Controls */}
        {/* UI Controls */}
        {!isActive ? (
          <div className="text-center space-y-4">
            <p className="text-gray-600">
              {isMobile
                ? "Nh·∫•n n√∫t b√™n d∆∞·ªõi v√† cho ph√©p truy c·∫≠p camera"
                : "Nh·∫•n 'B·∫≠t camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh"}
            </p>
            <div className="space-y-2">
              <Button onClick={startCamera} className="w-full">
                üì∑ B·∫≠t camera
              </Button>

              {/* Debug button */}
              <Button
                onClick={async () => {
                  console.log("üîß Force debug camera start");
                  try {
                    const stream = await navigator.mediaDevices.getUserMedia({
                      video: true,
                    });
                    console.log("üîß Debug stream:", stream);
                    if (videoRef.current) {
                      videoRef.current.srcObject = stream;
                      streamRef.current = stream;

                      // Force play
                      await videoRef.current.play();
                      setIsActive(true);
                      console.log("üîß Debug: Video set up complete");
                    }
                  } catch (err) {
                    console.error("üîß Debug failed:", err);
                    setError(`Debug error: ${err}`);
                  }
                }}
                variant="outline"
                className="w-full"
                size="sm"
              >
                üîß Debug Force Start
              </Button>

              <Button
                variant="outline"
                onClick={handleClose}
                className="w-full"
              >
                H·ªßy
              </Button>
            </div>

            {isMobile && permissions.camera === "denied" && (
              <div className="text-xs text-gray-500 mt-2">
                <p>N·∫øu kh√¥ng th·ªÉ b·∫≠t camera, vui l√≤ng:</p>
                <p>1. V√†o C√†i ƒë·∫∑t tr√¨nh duy·ªát</p>
                <p>2. Cho ph√©p truy c·∫≠p Camera cho trang n√†y</p>
                <p>3. T·∫£i l·∫°i trang</p>
              </div>
            )}
          </div>
        ) : null}
      </Card>
    </div>
  );
}
