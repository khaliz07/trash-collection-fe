"use client";
import { useState } from "react";
import { CheckInData, CheckInConfig } from "./types";
import { mockCheckInData, mockCheckInConfig } from "./mockData";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ImagePreview } from "@/components/ui/image-preview";
import { Camera } from "@/components/ui/camera";
import {
  validateImageFreshness,
  getTimeSinceCreation,
} from "@/lib/image-utils";
import { useToast } from "@/hooks/use-toast";
import { usePermissions } from "@/hooks/use-permissions";
import { MobileInstructions } from "./MobileInstructions";
import { PermissionDialogPrompt } from "./PermissionDialogPrompt";
import { PermissionDebugger } from "./PermissionDebugger";

function getCurrentTimeString() {
  const now = new Date();
  return now.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}

import { CameraDebug } from "@/components/debug/camera-debug";

export default function CheckInPanel() {
  const [data, setData] = useState<CheckInData>(mockCheckInData);
  const [photo, setPhoto] = useState<File | null>(null);
  const [photoUrl, setPhotoUrl] = useState<string | undefined>(undefined);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showCamera, setShowCamera] = useState(false);
  const [locationPermissionChecked, setLocationPermissionChecked] =
    useState(false);
  const [showPermissionPrompt, setShowPermissionPrompt] = useState<
    "camera" | "geolocation" | "both" | null
  >(null);

  const config: CheckInConfig = mockCheckInConfig;
  const { toast } = useToast();
  const {
    permissions,
    requestGeolocationPermission,
    requestAllPermissions,
    requestCameraPermission,
    isMobile,
  } = usePermissions();

  // L·∫•y v·ªã tr√≠ GPS
  const getLocation = (): Promise<{ lat: number; lng: number }> => {
    return new Promise(async (resolve, reject) => {
      if (!navigator.geolocation) {
        reject("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.");
        return;
      }

      // Y√™u c·∫ßu quy·ªÅn GPS n·∫øu ch∆∞a c√≥
      if (!locationPermissionChecked) {
        const granted = await requestGeolocationPermission();
        setLocationPermissionChecked(true);

        if (!granted) {
          reject("Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ ti·∫øp t·ª•c.");
          return;
        }
      }

      navigator.geolocation.getCurrentPosition(
        (pos) =>
          resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),
        (error) => {
          let errorMessage = "Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ GPS.";

          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage =
                "Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t tr√¨nh duy·ªát.";
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = "Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng.";
              break;
            case error.TIMEOUT:
              errorMessage = "H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠.";
              break;
          }

          reject(errorMessage);
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 60000,
        }
      );
    });
  };

  // X·ª≠ l√Ω upload/ch·ª•p ·∫£nh
  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      validateAndSetPhoto(file);
    }
  };

  // X·ª≠ l√Ω khi nh·∫•n n√∫t ch·ª•p ·∫£nh - hi·ªÉn th·ªã prompt tr∆∞·ªõc khi trigger permission
  const handleCameraClick = () => {
    console.log("üéØ Camera button clicked");
    console.log("üìä Current permissions:", permissions);
    console.log("üé• Camera modal opening...");
    setShowCamera(true);
  };

  // Th·ª±c hi·ªán y√™u c·∫ßu quy·ªÅn camera sau khi user ƒë·ªìng √Ω
  const handleCameraPermissionRequest = async () => {
    setShowPermissionPrompt(null);

    toast({
      title: "ƒêang y√™u c·∫ßu quy·ªÅn camera",
      description: "Vui l√≤ng cho ph√©p truy c·∫≠p camera khi dialog xu·∫•t hi·ªán",
    });

    const granted = await requestCameraPermission();

    if (!granted) {
      toast({
        title: "Kh√¥ng th·ªÉ truy c·∫≠p camera",
        description: "Vui l√≤ng c·∫•p quy·ªÅn camera trong c√†i ƒë·∫∑t tr√¨nh duy·ªát",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "Quy·ªÅn camera ƒë√£ ƒë∆∞·ª£c c·∫•p",
      description: "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·ª•p ·∫£nh",
    });

    // M·ªü camera sau khi c√≥ quy·ªÅn
    setShowCamera(true);
  };
  const handleCameraCapture = (file: File) => {
    validateAndSetPhoto(file);
  };

  // Ki·ªÉm tra v√† set ·∫£nh
  const validateAndSetPhoto = (file: File) => {
    setError(null);

    // Ki·ªÉm tra th·ªùi gian t·∫°o ·∫£nh v·ªõi validation m·ªõi
    const validation = validateImageFreshness(file);

    if (!validation.isValid) {
      const errorMsg = `${validation.reason}. ·∫¢nh n√†y ƒë∆∞·ª£c t·∫°o ${validation.timeSince}.`;
      setError(errorMsg);

      // S·ª≠ d·ª•ng toast ƒë·ªÉ th√¥ng b√°o
      toast({
        title: "·∫¢nh kh√¥ng h·ª£p l·ªá",
        description: errorMsg,
        variant: "destructive",
      });
      return;
    }

    setPhoto(file);
    setPhotoUrl(URL.createObjectURL(file));

    // Th√¥ng b√°o th√†nh c√¥ng
    toast({
      title: "·∫¢nh h·ª£p l·ªá",
      description: `·∫¢nh ƒë∆∞·ª£c ch·ª•p ${validation.timeSince} - ph√π h·ª£p cho ƒëi·ªÉm danh.`,
      variant: "default",
    });
  };

  // X·ª≠ l√Ω ƒëi·ªÉm danh v·ªõi permission prompt
  const handleCheckIn = async () => {
    setError(null);
    setLoading(true);

    try {
      // Ki·ªÉm tra v√† hi·ªÉn th·ªã prompt cho quy·ªÅn GPS n·∫øu c·∫ßn
      if (permissions.geolocation !== "granted") {
        setLoading(false);
        setShowPermissionPrompt("geolocation");
        return;
      }

      const location = await getLocation();

      if (config.requirePhoto && !photo) {
        const errorMsg = "Vui l√≤ng ch·ª•p ho·∫∑c t·∫£i l√™n ·∫£nh ƒëi·ªÉm danh!";
        setError(errorMsg);
        toast({
          title: "Thi·∫øu ·∫£nh ƒëi·ªÉm danh",
          description: errorMsg,
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      // Simulate API call
      setTimeout(() => {
        setData({
          checkedIn: true,
          checkInTime: getCurrentTimeString(),
          location,
          photoUrl: photoUrl,
        });

        toast({
          title: "ƒêi·ªÉm danh th√†nh c√¥ng!",
          description: `ƒê√£ ƒëi·ªÉm danh l√∫c ${getCurrentTimeString()}`,
          variant: "default",
        });

        setLoading(false);
      }, 1000);
    } catch (err: any) {
      const errorMsg =
        typeof err === "string"
          ? err
          : err.message || "C√≥ l·ªói x·∫£y ra khi ƒëi·ªÉm danh";
      setError(errorMsg);

      toast({
        title: "L·ªói ƒëi·ªÉm danh",
        description: errorMsg,
        variant: "destructive",
      });

      setLoading(false);
    }
  };

  // Th·ª±c hi·ªán y√™u c·∫ßu quy·ªÅn GPS sau khi user ƒë·ªìng √Ω
  const handleGeolocationPermissionRequest = async () => {
    setShowPermissionPrompt(null);
    setLoading(true);

    toast({
      title: "ƒêang y√™u c·∫ßu quy·ªÅn v·ªã tr√≠",
      description: "Vui l√≤ng cho ph√©p truy c·∫≠p v·ªã tr√≠ khi dialog xu·∫•t hi·ªán",
    });

    const gpsGranted = await requestGeolocationPermission();
    if (!gpsGranted) {
      toast({
        title: "Kh√¥ng th·ªÉ truy c·∫≠p v·ªã tr√≠",
        description: "Vui l√≤ng c·∫•p quy·ªÅn v·ªã tr√≠ ƒë·ªÉ ti·∫øp t·ª•c ƒëi·ªÉm danh",
        variant: "destructive",
      });
      setLoading(false);
      return;
    }

    // Ti·∫øp t·ª•c ƒëi·ªÉm danh sau khi c√≥ quy·ªÅn GPS
    handleCheckIn();
  };

  // Y√™u c·∫ßu t·∫•t c·∫£ quy·ªÅn
  const handleRequestPermissions = async () => {
    setLoading(true);
    const result = await requestAllPermissions();
    setLoading(false);

    if (result.camera && result.geolocation) {
      toast({
        title: "Quy·ªÅn ƒë√£ ƒë∆∞·ª£c c·∫•p",
        description: "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng camera v√† GPS.",
        variant: "default",
      });
    } else {
      const missingPermissions = [];
      if (!result.camera) missingPermissions.push("Camera");
      if (!result.geolocation) missingPermissions.push("GPS");

      toast({
        title: "M·ªôt s·ªë quy·ªÅn ch∆∞a ƒë∆∞·ª£c c·∫•p",
        description: `Vui l√≤ng c·∫•p quy·ªÅn: ${missingPermissions.join(", ")}`,
        variant: "destructive",
      });
    }
  };

  return (
    <div>
      {/* Mobile Instructions */}
      {isMobile && <MobileInstructions />}

      {/* Debug Panel - only in development */}
      {process.env.NODE_ENV === "development" && <PermissionDebugger />}

      <Card
        className={`mx-auto p-6 mt-8 ${isMobile ? "max-w-sm" : "max-w-md"}`}
      >
        <h2 className="text-lg font-bold mb-2">ƒêi·ªÉm danh b·∫Øt ƒë·∫ßu ca</h2>

        {/* Debug controls */}
        <div className="mb-4 p-4 bg-blue-50 border rounded-lg">
          <h3 className="font-semibold mb-2">üîß Debug Controls</h3>
          <div className="flex gap-2 flex-wrap">
            <Button 
              size="sm" 
              variant="outline"
              onClick={() => {
                console.log("üéØ Force open camera");
                setShowCamera(true);
              }}
            >
              üé• Force Open Camera
            </Button>
            <Button 
              size="sm" 
              variant="outline"
              onClick={() => {
                console.log("üìä Current states:", {
                  showCamera,
                  permissions,
                  photo: !!photo,
                  photoUrl
                });
              }}
            >
              üìä Log States
            </Button>
            <Button 
              size="sm" 
              variant="outline"
              onClick={async () => {
                console.log("üì± Test camera permission");
                const granted = await requestCameraPermission();
                console.log("Permission result:", granted);
              }}
            >
              üîë Test Permission
            </Button>
          </div>
        </div>

        {/* Mobile permissions warning */}
        {isMobile &&
          (permissions.camera === "denied" ||
            permissions.geolocation === "denied") && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="text-sm text-yellow-800">
                <p className="font-medium">‚ö†Ô∏è C·∫ßn c·∫•p quy·ªÅn truy c·∫≠p</p>
                <p className="mt-1">
                  ·ª®ng d·ª•ng c·∫ßn quy·ªÅn Camera v√† GPS ƒë·ªÉ ƒëi·ªÉm danh.
                </p>
                <Button
                  variant="outline"
                  size="sm"
                  className="mt-2 w-full"
                  onClick={handleRequestPermissions}
                  disabled={loading}
                >
                  C·∫•p quy·ªÅn ngay
                </Button>
              </div>
            {/* Debug tool */}
            <div className="mt-8 border-t pt-4">
              <CameraDebug />
            </div>
          </div>
        )}        <div className="mb-4">
          <Badge variant={data.checkedIn ? "success" : "warning"}>
            {data.checkedIn ? "ƒê√£ ƒëi·ªÉm danh" : "Ch∆∞a ƒëi·ªÉm danh"}
          </Badge>
        </div>
        {data.checkedIn ? (
          <div className="space-y-2">
            <div>
              <span className="font-medium">Th·ªùi gian ƒëi·ªÉm danh:</span>{" "}
              {data.checkInTime}
            </div>
            {data.location && (
              <div>
                <span className="font-medium">V·ªã tr√≠:</span>{" "}
                {data.location.lat.toFixed(5)}, {data.location.lng.toFixed(5)}
              </div>
            )}
            {data.photoUrl && (
              <div>
                <span className="font-medium">·∫¢nh ƒëi·ªÉm danh:</span>
                <div className="mt-1">
                  <ImagePreview
                    src={data.photoUrl}
                    alt="·∫¢nh ƒëi·ªÉm danh"
                    previewSize="sm"
                  />
                </div>
              </div>
            )}
          </div>
        ) : (
          <>
            {config.requirePhoto && (
              <div className="mb-4">
                <label className="block font-medium mb-2">
                  Ch·ª•p ho·∫∑c t·∫£i l√™n ·∫£nh ƒëi·ªÉm danh:
                </label>

                <div className="space-y-3">
                  {/* N√∫t ch·ª•p ·∫£nh */}
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleCameraClick}
                    className="w-full"
                    size={isMobile ? "lg" : "default"}
                  >
                    üì∑ Ch·ª•p ·∫£nh ngay
                  </Button>

                  {/* Ho·∫∑c upload file */}
                  <div className="text-center text-sm text-gray-500">ho·∫∑c</div>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={handlePhotoChange}
                    className={isMobile ? "text-base" : ""}
                  />

                  {isMobile && (
                    <p className="text-xs text-gray-500 text-center">
                      üí° Khuy·∫øn kh√≠ch ch·ª•p ·∫£nh tr·ª±c ti·∫øp ƒë·ªÉ ƒë·∫£m b·∫£o th·ªùi gian
                      ch√≠nh x√°c
                    </p>
                  )}
                </div>

                {photoUrl && (
                  <div className="mt-3">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">·∫¢nh ƒë√£ ch·ªçn:</span>
                      {photo && (
                        <span className="text-xs text-gray-500">
                          {getTimeSinceCreation(photo)}
                        </span>
                      )}
                    </div>
                    <ImagePreview
                      src={photoUrl}
                      alt="·∫¢nh ƒëi·ªÉm danh"
                      previewSize="sm"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setPhoto(null);
                        setPhotoUrl(undefined);
                        setError(null);
                      }}
                      className="mt-2 text-red-600 hover:text-red-700"
                    >
                      üóëÔ∏è X√≥a ·∫£nh
                    </Button>
                  </div>
                )}
              </div>
            )}
            {error && (
              <div className="text-red-600 mb-2 text-sm bg-red-50 p-3 rounded-lg border border-red-200">
                {error}
              </div>
            )}
            <Button
              onClick={handleCheckIn}
              disabled={
                loading ||
                (isMobile &&
                  (permissions.camera === "denied" ||
                    permissions.geolocation === "denied"))
              }
              className="w-full"
              size={isMobile ? "lg" : "default"}
            >
              {loading ? "ƒêang ƒëi·ªÉm danh..." : "ƒêi·ªÉm danh b·∫Øt ƒë·∫ßu ca"}
            </Button>
          </>
        )}

        {/* Camera Modal */}
        {showCamera && (
          <Camera
            onCapture={handleCameraCapture}
            onClose={() => setShowCamera(false)}
          />
        )}

        {/* Permission Dialog Prompt */}
        {showPermissionPrompt && (
          <PermissionDialogPrompt
            type={showPermissionPrompt}
            onClose={() => setShowPermissionPrompt(null)}
            onProceed={
              showPermissionPrompt === "camera"
                ? handleCameraPermissionRequest
                : handleGeolocationPermissionRequest
            }
          />
        )}
      </Card>
    </div>
  );
}
