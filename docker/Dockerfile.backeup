# Multi-stage build for production optimization
FROM node:20-alpine AS base

# Install dependencies for native modules and OpenSSL
RUN apk add --no-cache libc6-compat openssl openssl-dev

WORKDIR /app

# Copy package files
COPY package.json yarn.lock* ./
COPY prisma ./prisma

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN yarn build

# Production stage
FROM node:20-alpine AS production

# Install dependencies for native modules and OpenSSL
RUN apk add --no-cache libc6-compat openssl openssl-dev

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=base /app/public ./public
COPY --from=base --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=base --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=base /app/prisma ./prisma
COPY --from=base /app/package.json ./package.json

# Install production dependencies only
RUN yarn install --production --frozen-lockfile

# Generate Prisma client for production
RUN npx prisma generate

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD node healthcheck.js

CMD ["node", "server.js"]

